{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "toc_visible": true,
      "authorship_tag": "ABX9TyNE4eD7IvUO150/EXVQD+jF",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Diogo-Cardeal/PyTorch-for-DL-ML/blob/main/01_PyTorch.ipynb/Module1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### PyTorch Workflow\n"
      ],
      "metadata": {
        "id": "587BvEU6YjOJ"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bMiQU0xlXXrP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "outputId": "12e83aaf-6893-4639-de26-6c8e6e301341"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'2.5.1+cu124'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "import torch\n",
        "import numpy as np\n",
        "from torch import nn\n",
        "import matplotlib.pyplot as plt\n",
        "torch.__version__"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1. Data(preparing and loading)"
      ],
      "metadata": {
        "id": "pEEGAhLX8cOH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Weith = 0.7\n",
        "bias = 0.3\n",
        "\n",
        "start = 0\n",
        "end = 1\n",
        "step = 0.02\n",
        "X = torch.arange(start,end,step).unsqueeze(dim=1)\n",
        "y = Weith * X + bias\n",
        "X[:10], y[:10]\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5v3t7kMp8IZJ",
        "outputId": "4b333f6d-58ba-468a-f091-957f80e50f19"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([[0.0000],\n",
              "         [0.0200],\n",
              "         [0.0400],\n",
              "         [0.0600],\n",
              "         [0.0800],\n",
              "         [0.1000],\n",
              "         [0.1200],\n",
              "         [0.1400],\n",
              "         [0.1600],\n",
              "         [0.1800]]),\n",
              " tensor([[0.3000],\n",
              "         [0.3140],\n",
              "         [0.3280],\n",
              "         [0.3420],\n",
              "         [0.3560],\n",
              "         [0.3700],\n",
              "         [0.3840],\n",
              "         [0.3980],\n",
              "         [0.4120],\n",
              "         [0.4260]]))"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(X), len(y)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7_fPS99m9-fs",
        "outputId": "eac361f9-8461-4afc-965c-7997b07eca15"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(50, 50)"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_split = int(0.8 * len(X))\n",
        "X_train, y_train = X[:train_split], y[:train_split]\n",
        "X_test, y_test = X[train_split:], y[train_split:]\n",
        "\n",
        "len(X_test), len(y_test), len(X_train), len(y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fWeASrNy-MZh",
        "outputId": "38ac4ced-2764-48c5-c1d2-106a08cd567d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(10, 10, 40, 40)"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_predictions(train_data=X_train,\n",
        "                      train_labels=y_train,\n",
        "                      test_data=X_test,\n",
        "                      test_labels=y_test,\n",
        "                      predictions=None):\n",
        "\n",
        "  plt.figure(figsize=(10,7))\n",
        "\n",
        "  plt.scatter(train_data, train_labels, c=\"b\", s=20, label=\"Training data\")\n",
        "  plt.scatter(test_data, test_labels, c=\"y\", s=20, label=\"Testing data\")\n",
        "  if predictions is not None:\n",
        "    plt.scatter(test_data, predictions, c=\"r\", s=20, label=\"Predictions\")\n",
        "  plt.legend(prop={\"size\":14})\n"
      ],
      "metadata": {
        "id": "TZhgyrhsBNPX"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plot_predictions()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 599
        },
        "id": "srEXPWw_BnFl",
        "outputId": "339560d9-0232-4f0e-9618-2dfd59a3591b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class LinearRegressionModel(nn.Module):\n",
        "  def __init__(self):\n",
        "    super().__init__()\n",
        "    self.weights = nn.Parameter(torch.randn(1,\n",
        "                                requires_grad = True,\n",
        "                                dtype=torch.float))\n",
        "    self.bias = nn.Parameter(torch.randn(1,\n",
        "                             requires_grad = True,\n",
        "                             dtype=torch.float))\n",
        "\n",
        "  def forward(self, x:torch.Tensor) -> torch.Tensor:\n",
        "    return self.weights * x + self.bias\n"
      ],
      "metadata": {
        "id": "sljYxJgGBp7x"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "torch.manual_seed(42)\n",
        "\n",
        "model_0 = LinearRegressionModel()\n",
        "\n",
        "# list(model_0.parameters())\n",
        "model_0.state_dict()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZVTD6KuaGQjp",
        "outputId": "4d0ab90d-ee1d-45dc-8e91-bb41c0f245dd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "OrderedDict([('weights', tensor([0.3367])), ('bias', tensor([0.1288]))])"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "with torch.inference_mode():\n",
        "  y_preds = model_0(X_test)\n",
        "\n",
        "plot_predictions(predictions=y_preds)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 599
        },
        "id": "ISNDhPSdLFwO",
        "outputId": "16a18fd2-bbbf-44b4-9e88-6db18d57ea8b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 1 Axes>"
            ],
            "image/png": "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Ix6JiYn+Wp8+fSRJu3fv7oLOTT/72c8UGxurBx54QPv37/fXa2pqdNdddwX1WFOnTlVDQ4Pmz58fUH/jjTdavD7n8BGko8dd33PPPfrwww+b7d/W9+PwY7377rsB1+V8/vnnIT1CBgAAQi8uzq7c3CKNGePRiBFrNGaMR7m5RYyW7gKcuhakw2/O2toS1dV5I24dnUWLFmnLli168MEHtXr1ap1//vnq37+/9uzZow8++EDvv/++Nm7cqP79+2vr1q368Y9/rDFjxvgv3D+8dkxsbKxuuukm/+MeXij0N7/5jT766COlpKSod+/e/ilinSE7O1tz587V3XffrREjRujyyy9Xjx49tGrVKo0YMUIffvhhu4ckzJkzR6tWrdKyZcv00Ucf6fzzz9fu3bv1pz/9SZdeeqlWr14dsP8111yjp556Spdddpkuv/xy9e3bV++99562bNnS4v6nnHKKBg0apOeff14JCQkaMmSIYmJidMMNN/gntb344osaPXq0LrzwQpWXl+u1117ThRde6D96BAAAoldSUmZEfYaMSKGYdX28wmkdnUjS0jo6hmGuU/PEE08Y55xzjpGcnGwkJCQY3/ve9wyXy2U89thjxjfffGMYhmHs3r3bmDt3rvGDH/zA6N+/vxEfH29873vfM3784x8HrG9z2IoVK4wRI0YYCQkJhiRj6NCh/m1traNz9Ho1htH2OjSPPvqoceqppxrx8fHGkCFDjFtuucXYvXu3IcmYPHlyu78/X331lXH11VcbJ510kpGYmGiMGjXKWLVqVat9rVu3zjjnnHOMXr16Gb179zby8vKMzZs3t7qG0HvvvWeMHz/e6NWrl39tnp07dxqGYRgHDhwwbr75ZmPYsGFGQkKCkZmZadx5551GQ0NDUOsBtYWfCQAAul5NzXZj//41Rk2Nx+pWuo32rqMTYxiGYUnCCkJ1dbVSUlJUVVXV4oQuSTp48KB27typ4cOHB5xShe7B7Xbroosu0pw5c3Tvvfda3U5Y4GcCAICu09hY8e36it8tPWK3O5WTU8hpaF2sPdlA4hodRJh9+/Y1u8D/66+/9l/bMmXKFAu6AgAA3U0kLyLfXXCNDiLKH/7wB91///264IILNGjQIH355ZcqKirS3r17NX36dI0bN87qFgEAQJSL9EXkuwuCDiLK2WefrVGjRsntdquiokI2m02nnnqqbr/9dl133XVWtwcAALqBSF9Evrsg6CCijBkzRq+88orVbQAAgG4s0heR7y64RgcAAAAIQqQvIt9dEHQAAACAIEXyIvLdBaeuAQAAAEGK9EXkuwOCDgAAANBBSUmZBJwwRdABAABAt1db61FdXSlHZqIIQQcAAADdVmNjxbeLf363Lo7d7lROTqHi4uwWdobjxTACAAAAdFtmyHEH1Cor3dq2Ld+ijtBZCDoAAADolmprPd8eyfEdtcWnyspi1daWWNEWOglBBwAAAN1SXV3pMbZ7Q9QJugJBB11u165diomJ0fTp0wPqEyZMUExMTJc977BhwzRs2LAue3wAABDZevZMP8b2jBB1gq5A0Ikyh0PFkbf4+HilpaWpoKBA//73v61usdNMnz5dMTEx2rVrl9WtAACACJSUlCW73SnJdtQWm+x2J9PXIhxT16JUenq6fvGLX0iSvvnmG7333nsqLCzUqlWrtHbtWp1zzjkWdyg988wzqq2t7bLHX7t2bZc9NgAAiA45OYXati3/qKlrDuXkFFrYFToDQSdKZWRkaOHChQG12267TXfddZduvfVWrV+/3pK+jvS9732vSx8/Pb3tw9EAAABxcXbl5haptrZEdXVe1tGJIpy61o3ccMMNkqR//OMfkqSYmBhNmDBBe/bs0ZVXXqkBAwYoNjY2IAS99dZbmjRpkvr166eEhARlZmbqtttua/FIjM/n07333quMjAwlJiYqIyNDixcvVlNTU4v9tHWNziuvvKKLL75Yffv2VWJiooYNG6apU6fqww8/lGRef/P0009LkoYPH+4/TW/ChAn+x2jtGp2amhotWLBAp5xyihITE9WnTx9deumleuedd5rtu3DhQsXExGj9+vX64x//qJEjR6pnz54aOHCgbrzxRtXV1TW7z4svvqjx48erf//+SkxM1KBBg+RwOPTiiy+2+FoBAID1kpIy1bfvJYScKMIRnY7yeKTSUikjQ8qMrB+II8PFV199pXHjxqlPnz762c9+poMHDyo5OVmS9Nhjj2nWrFnq3bu3Jk2apP79++uf//yn7rrrLq1bt07r1q1TfHy8/7GuvvpqLV++XMOHD9esWbN08OBBLVmyRO+++25Q/d18881asmSJ+vTpoylTpqh///7avXu33G63Ro0apdNOO02//vWvtWLFCr3//vu68cYb1bt3b0k6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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "loss_fn = nn.L1Loss()\n",
        "\n",
        "optimizer = torch.optim.SGD(params=model_0.parameters(),\n",
        "                            lr=0.001)"
      ],
      "metadata": {
        "id": "I4a8xnNXMIN0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "torch.manual_seed(42)\n",
        "\n",
        "\n",
        "epochs = 100\n",
        "\n",
        "epoch_count = []\n",
        "loss_values = []\n",
        "test_loss_values = []\n",
        "\n",
        "for epoch in range(epochs):\n",
        "  model_0.train()\n",
        "\n",
        "  y_preds = model_0(X_train)\n",
        "\n",
        "  loss = loss_fn(y_preds, y_train)\n",
        "\n",
        "  optimizer.zero_grad()\n",
        "\n",
        "  loss.backward()\n",
        "\n",
        "  optimizer.step()\n",
        "\n",
        "  model_0.eval()\n",
        "\n",
        "  with torch.inference_mode():\n",
        "\n",
        "    test_pred = model_0(X_test)\n",
        "\n",
        "    test_loss = loss_fn(test_pred, y_test)\n",
        "\n",
        "  if epoch % 10 == 0:\n",
        "    epoch_count.append(epoch)\n",
        "    loss_values.append(loss)\n",
        "    test_loss_values.append(test_loss)\n",
        "    print(f\"Epoch: {epoch} | Loss: {loss} | Test loss: {test_loss}\")\n",
        "    print(model_0.state_dict())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ILgHY8kteyBc",
        "outputId": "87368b1c-8c3e-459d-d407-dcc2975e037f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch: 0 | Loss: 0.007870787754654884 | Test loss: 0.011371594853699207\n",
            "OrderedDict([('weights', tensor([0.6907])), ('bias', tensor([0.2969]))])\n",
            "Epoch: 10 | Loss: 0.001258974545635283 | Test loss: 0.0029639541171491146\n",
            "OrderedDict([('weights', tensor([0.6939])), ('bias', tensor([0.3025]))])\n",
            "Epoch: 20 | Loss: 0.0009092137333936989 | Test loss: 0.0020679414737969637\n",
            "OrderedDict([('weights', tensor([0.6956])), ('bias', tensor([0.3018]))])\n",
            "Epoch: 30 | Loss: 0.0005659162998199463 | Test loss: 0.0012405574088916183\n",
            "OrderedDict([('weights', tensor([0.6974])), ('bias', tensor([0.3011]))])\n",
            "Epoch: 40 | Loss: 0.00022584720863960683 | Test loss: 0.0005541443824768066\n",
            "OrderedDict([('weights', tensor([0.6990])), ('bias', tensor([0.3003]))])\n",
            "Epoch: 50 | Loss: 0.00043134987936355174 | Test loss: 0.0012094974517822266\n",
            "OrderedDict([('weights', tensor([0.6990])), ('bias', tensor([0.2997]))])\n",
            "Epoch: 60 | Loss: 0.00043134987936355174 | Test loss: 0.0012094974517822266\n",
            "OrderedDict([('weights', tensor([0.6990])), ('bias', tensor([0.2997]))])\n",
            "Epoch: 70 | Loss: 0.00043134987936355174 | Test loss: 0.0012094974517822266\n",
            "OrderedDict([('weights', tensor([0.6990])), ('bias', tensor([0.2997]))])\n",
            "Epoch: 80 | Loss: 0.00043134987936355174 | Test loss: 0.0012094974517822266\n",
            "OrderedDict([('weights', tensor([0.6990])), ('bias', tensor([0.2997]))])\n",
            "Epoch: 90 | Loss: 0.00043134987936355174 | Test loss: 0.0012094974517822266\n",
            "OrderedDict([('weights', tensor([0.6990])), ('bias', tensor([0.2997]))])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "CuWf2GAje28_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "with torch.inference_mode():\n",
        "  y_preds_new = model_0(X_test)\n",
        "\n",
        "plot_predictions(predictions=y_preds_new)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 599
        },
        "id": "7h2p3h8Tge4k",
        "outputId": "1a2bff20-6dc1-437f-c802-4dcc4e68c51b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(epoch_count, np.array(torch.tensor(loss_values).numpy()), label=\"Train loss\")\n",
        "plt.plot(epoch_count, test_loss_values, label=\"Test loss\")\n",
        "plt.title(\"Training and test loss curve\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.legend();"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "38J9T7XamAqG",
        "outputId": "f5718594-a1cf-49b7-99be-592114adefa7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pathlib import Path\n",
        "\n",
        "model_path = Path(\"models\")\n",
        "model_path.mkdir(parents=True, exist_ok=True)\n",
        "\n",
        "model_name = \"EX1_model_0.pth\"\n",
        "model_save_path = model_path / model_name\n",
        "\n",
        "print(f\"Saving model to: {model_save_path}\")\n",
        "torch.save(obj=model_0.state_dict(),\n",
        "           f=model_save_path)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UTVFdOUidLtT",
        "outputId": "7ba6c04c-79b7-4b82-e415-df074f27a9cb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving model to: models/EX1_model_0.pth\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "loaded_model_0 = LinearRegressionModel()\n",
        "loaded_model_0.load_state_dict(torch.load(f=model_save_path, weights_only=True))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6IxH9Fp_3Yc5",
        "outputId": "b61eef30-a43a-4666-fc7b-3d6447bdbc4d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<All keys matched successfully>"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "loaded_model_0.eval()\n",
        "with torch.inference_mode():\n",
        "  loaded_model_0_pred = loaded_model_0(X_test)\n",
        "\n",
        "loaded_model_0_pred == y_preds_new"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VjhIt4C84oVb",
        "outputId": "5658807c-a646-499a-970c-6f0a8de9ad7e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[True],\n",
              "        [True],\n",
              "        [True],\n",
              "        [True],\n",
              "        [True],\n",
              "        [True],\n",
              "        [True],\n",
              "        [True],\n",
              "        [True],\n",
              "        [True]])"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import numpy as np\n",
        "from torch import nn\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "ca5XYnEI8LaZ"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
        "print(f\"Device: {device}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1ImcnAwAPiSV",
        "outputId": "224d8e14-00a0-4c32-ea3f-aac505a391af"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Device: cuda\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Creat some date using the linear regression formula of y = weight * X + bias\n",
        "weight = 0.7\n",
        "bias = 0.3\n",
        "\n",
        "# Creat range values\n",
        "start = 0\n",
        "end = 1\n",
        "step = 0.02\n",
        "\n",
        "# Creat x and y (features and labels)\n",
        "X = torch.arange(start, end, step).unsqueeze(dim=1) #without unsqueeze, errors will pop up\n",
        "y = weight * X + bias\n",
        "X[:10], y[:10]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mlYo_GXGEghD",
        "outputId": "d56ef7f2-1627-4cc4-8fc1-1898a8bb769b"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([[0.0000],\n",
              "         [0.0200],\n",
              "         [0.0400],\n",
              "         [0.0600],\n",
              "         [0.0800],\n",
              "         [0.1000],\n",
              "         [0.1200],\n",
              "         [0.1400],\n",
              "         [0.1600],\n",
              "         [0.1800]]),\n",
              " tensor([[0.3000],\n",
              "         [0.3140],\n",
              "         [0.3280],\n",
              "         [0.3420],\n",
              "         [0.3560],\n",
              "         [0.3700],\n",
              "         [0.3840],\n",
              "         [0.3980],\n",
              "         [0.4120],\n",
              "         [0.4260]]))"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Split data\n",
        "train_split = int(0.8 * len(X))\n",
        "X_train, y_train = X[:train_split], y[:train_split]\n",
        "X_test, y_test = X[train_split:], y[train_split:]\n",
        "len(X_train),len(y_train),len(X_test),len(y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cAW697oiGemU",
        "outputId": "4f04ef72-0614-4b95-839c-2a6fcc6455ed"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(40, 40, 10, 10)"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Plot the data\n",
        "# Note: if you don't have the plot_predictions() function loaded, this will error\n",
        "plot_predictions(X_train, y_train, X_test, y_test)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 599
        },
        "id": "_6dUj_anH04Q",
        "outputId": "16efe9d1-cbb5-435a-af03-82a796deeb07"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class LinearRegressionModelV2(nn.Module):\n",
        "  def __init__(self):\n",
        "    super().__init__()\n",
        "    # Use nn.Linear() for creating the model parameters\n",
        "    self.linear_layer = nn.Linear(in_features=1,\n",
        "                                  out_features=1)\n",
        "\n",
        "  def forward(self, x: torch.Tensor) -> torch.Tensor:\n",
        "    return self.linear_layer(x)\n",
        "\n",
        "# set the manual seed\n",
        "torch.manual_seed(42)\n",
        "model_1 = LinearRegressionModelV2()\n",
        "model_1, model_1.state_dict()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pRPVC1WjIP_U",
        "outputId": "148c28fd-e8a0-459c-d364-56d1cb5c8800"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(LinearRegressionModelV2(\n",
              "   (linear_layer): Linear(in_features=1, out_features=1, bias=True)\n",
              " ),\n",
              " OrderedDict([('linear_layer.weight', tensor([[0.7645]])),\n",
              "              ('linear_layer.bias', tensor([0.8300]))]))"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Set the model to use the target device\n",
        "model_1.to(device)\n",
        "next(model_1.parameters()).device"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DKlBSerDO734",
        "outputId": "6e5db499-d230-44fc-dfc9-1089127d57e8"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "device(type='cuda', index=0)"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Set up loss function\n",
        "loss_fn = nn.L1Loss() #same as MAE\n",
        "\n",
        "# Set up our optimizer\n",
        "optimizer = torch.optim.SGD(params=model_1.parameters(),\n",
        "                            lr= 0.01)\n",
        "\n"
      ],
      "metadata": {
        "id": "EZhDUsQORUGR"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Write the training loop\n",
        "torch.manual_seed(42)\n",
        "\n",
        "epochs = 200\n",
        "\n",
        "#Put data on the target device (device agnostic code for data)\n",
        "X_train = X_train.to(device)\n",
        "y_train = y_train.to(device)\n",
        "X_test = X_test.to(device)\n",
        "y_test = y_test.to(device)\n",
        "\n",
        "\n",
        "for epoch in range(epochs):\n",
        "  model_1.train()\n",
        "\n",
        "  #1. Foward pass\n",
        "  y_pred = model_1(X_train)\n",
        "\n",
        "  #2. Calculate the loss\n",
        "  loss = loss_fn(y_pred, y_train)\n",
        "\n",
        "  #3. Optimizer zero grad\n",
        "  optimizer.zero_grad()\n",
        "\n",
        "  #4. Perform backpropagation\n",
        "  loss.backward()\n",
        "\n",
        "  #5. Optmizer step\n",
        "  optimizer.step()\n",
        "\n",
        "  ### Testing\n",
        "  model_1.eval()\n",
        "  with torch.inference_mode():\n",
        "    test_pred = model_1(X_test)\n",
        "\n",
        "    test_loss = loss_fn(test_pred, y_test)\n",
        "\n",
        "  # Print ou what's happening\n",
        "\n",
        "  if epoch % 10 == 0:\n",
        "    print(f\"Epoch: {epoch} | Loss: {loss} | Test loss: {test_loss}\")"
      ],
      "metadata": {
        "id": "_5UfZK7kSInT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d8c0887e-67f6-49bc-d139-820839cfa336"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch: 0 | Loss: 0.5551779866218567 | Test loss: 0.5739762187004089\n",
            "Epoch: 10 | Loss: 0.439968079328537 | Test loss: 0.4392664134502411\n",
            "Epoch: 20 | Loss: 0.3247582018375397 | Test loss: 0.30455657839775085\n",
            "Epoch: 30 | Loss: 0.20954833924770355 | Test loss: 0.16984669864177704\n",
            "Epoch: 40 | Loss: 0.09433845430612564 | Test loss: 0.03513690456748009\n",
            "Epoch: 50 | Loss: 0.023886388167738914 | Test loss: 0.04784907028079033\n",
            "Epoch: 60 | Loss: 0.019956795498728752 | Test loss: 0.045803118497133255\n",
            "Epoch: 70 | Loss: 0.016517987474799156 | Test loss: 0.037530567497015\n",
            "Epoch: 80 | Loss: 0.013089174404740334 | Test loss: 0.02994490973651409\n",
            "Epoch: 90 | Loss: 0.009653178043663502 | Test loss: 0.02167237363755703\n",
            "Epoch: 100 | Loss: 0.006215683650225401 | Test loss: 0.014086711220443249\n",
            "Epoch: 110 | Loss: 0.00278724217787385 | Test loss: 0.005814164876937866\n",
            "Epoch: 120 | Loss: 0.0012645035749301314 | Test loss: 0.013801801018416882\n",
            "Epoch: 130 | Loss: 0.0012645035749301314 | Test loss: 0.013801801018416882\n",
            "Epoch: 140 | Loss: 0.0012645035749301314 | Test loss: 0.013801801018416882\n",
            "Epoch: 150 | Loss: 0.0012645035749301314 | Test loss: 0.013801801018416882\n",
            "Epoch: 160 | Loss: 0.0012645035749301314 | Test loss: 0.013801801018416882\n",
            "Epoch: 170 | Loss: 0.0012645035749301314 | Test loss: 0.013801801018416882\n",
            "Epoch: 180 | Loss: 0.0012645035749301314 | Test loss: 0.013801801018416882\n",
            "Epoch: 190 | Loss: 0.0012645035749301314 | Test loss: 0.013801801018416882\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model_1.state_dict()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "scpW_IN-K1vj",
        "outputId": "45689e36-a10b-481f-d5a6-04e4cf90f100"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "OrderedDict([('linear_layer.weight', tensor([[0.6968]], device='cuda:0')),\n",
              "             ('linear_layer.bias', tensor([0.3025], device='cuda:0'))])"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Turn model into evaluation mode\n",
        "model_1.eval()\n",
        "\n",
        "# Make predictions on the test data\n",
        "with torch.inference_mode():\n",
        "  y_preds = model_1(X_test)\n",
        "y_preds"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "39ZmtEPkLKh_",
        "outputId": "5300bd20-e5e6-47a2-a18d-fd4dcface626"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[0.8600],\n",
              "        [0.8739],\n",
              "        [0.8878],\n",
              "        [0.9018],\n",
              "        [0.9157],\n",
              "        [0.9296],\n",
              "        [0.9436],\n",
              "        [0.9575],\n",
              "        [0.9714],\n",
              "        [0.9854]], device='cuda:0')"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check out our model predictions\n",
        "\n",
        "plot_predictions(predictions=y_preds.cpu())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 599
        },
        "id": "eyfU-1EAMuFS",
        "outputId": "c1b39f94-bccf-401d-ae94-cd170534026e"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 1 Axes>"
            ],
            "image/png": "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GxiGcfiAOhzJJ58UqLraY6lVV3v0ySf5NnXUdo2NjXr88ceVkZERuKTqoB49emjevHk6cOCAli1bZnleUlLS4S+lhIQEHXvssR3SV0FBgcaNGxf42uFwaNq0aZKk99//YYpIUVGR/H6/brzxRvXt29fS+6233hrUez777LOKj4/X7bffbqm7XC6de+65zT5nyJCm/8rSv39/XXLJJSorKwtcytcWAwcOVHx8fJP6wbNpHo+nyRoAAIhsdZtKlLxmr2IarfWYRil5zV4uY+tgXLoWhG+/9aq6uqSZFb+qq0v07bdlYX0Z29atW1VdXa0BAwYE7qk51FdffSVJgcvAhg0bplNOOUVFRUX6/PPPNWXKFE2YMEEjRoxQbGzHZeSRI0c2qR1//PGSpK+//jpQ27RpkyTpzDPPbHL8oUHpSGpra7V9+3adeOKJ6tevX5P1s846SytWrGhS37ZtmxYuXKi///3v2rVrl+rr6y3rX3zxhQYNGtSmHgzD0NNPP60lS5boo48+Uk1NjRobf/iv3hdffNHm7wcAAESGhi3vqek/Hx+yvrmUIQMdiKAThLq68iOs+8I66FRVVUmSPv74Y3388cctHrd//35JUrdu3fT3v/9d8+fP10svvaQbb7xRknTcccfp2muv1S233CKHw3HUfSUnJzepdetmfjT9fn+gVltbK0mWszkHpaWltfn9Wnudll7L5/Np9OjRqq2t1cSJEzVp0iQlJycrNjZWq1at0urVq5sEn9b853/+px555BGlp6frJz/5ifr376+EhARJ5gCDYF4LAABEhrihY1pfH5Ybok66BoJOEJKSMo6wnhmiTtrnYKC45JJL9OKLL7bpOb1799bDDz+shx56SFu2bNHf//53PfzwwyosLFRcXJzmzp3bmS1bHOx/9+7dTc6cVFZWtut1mtPca/3+979XdXW1nnvuOf3yl7+0rF111VVavXp1m99/9+7devTRR3XKKaeotLRU3bt3D6xVVFQ0e7YNAABEvqThLtWO7a0ea62Xrxmx5saf7InTsbhHJwjdu2crNdUl6fCzGA6lprrC+myOZF6KlpycrH/+859qaGgI6rkxMTEaNmyYZs2apbfeMq8fPXQc9cEzO4eegelow4cPlyS9++67TdbWrFnT5tdJTk7WkCFD5PP5VFFR0WT9H//4R5Naebl5Nu/gZLWDDMNotp/Wfh7btm2TYRhyOp2WkNPSewMAgOiRtPx97Tujt6W27wxz6ho6FkEnSCeeWKTUVKellprq1IknFtnUUdt169ZNV199tT799FPddNNNzYadjz76KHCmY8eOHYF9Xw518IxHYmJioNarVy9J0s6dOzuhc9PPf/5zxcbG6v7779eePXsC9f379+vOO+8M6rWmTp2qAwcOaN68eZb6m2++2ez9OQfPIB0+7vruu+/WRx991OT41n4eB19rzZo1lvtyPv/885CeIQMAAKEX13eIkt/do7pNb6r2hQWq2/Smkt/dw2jpTsCla0GKi0vV8OHF+vbbMtXV+SJuH50FCxZow4YNeuihh/T666/r7LPPVt++fbVr1y59+OGH2rRpk0pLS9W3b19t3LhRF198sUaPHh24cf/g3jGxsbG64YYbAq97cKPQ3/72t/r444+VkpKinj17BqaIdYScnBzNmTNHd911l04++WRdeuml6tatm5YtW6aTTz5ZH330UZuHJNx8881atmyZFi1apI8//lhnn322du7cqT//+c+68MIL9frrr1uOv+qqq/T000/rkksu0aWXXqrevXtr7dq12rBhQ7PHDx06VAMGDNALL7yghIQEHX/88YqJidF1110XmNT20ksvadSoUTr33HNVWVmp1157Teeee27g7BEAAIheSaecx+CBzhaKWddHK5z20Ykkze2jYxjmPjVPPvmkMW7cOCM5OdlISEgwfvSjHxlut9t4/PHHjW+++cYwDMPYuXOnMWfOHOOMM84w+vbta8THxxs/+tGPjIsvvtiyv81BS5YsMU4++WQjISHBkGQMGjQosNbaPjqH71djGK3vQ/PYY48Zw4YNM+Lj443jjz/euOmmm4ydO3cakozJkye3+eezd+9e48orrzSOO+44IzEx0Rg5cqSxbNmyFvtauXKlMW7cOKNHjx5Gz549jby8PGP9+vUt7iG0du1aY/z48UaPHj0Ce/Ns377dMAzD2Ldvn3HjjTcagwcPNhISEoysrCzjjjvuMA4cOBDUfkCt4e8EAACd79uNxUbNCwuMbze9aXcrXUZb99GJMQzDsCVhBaG2tlYpKSmqqalpdkKXJH333Xfavn27hgwZYrmkCl2Dx+PReeedp5tvvln33HOP3e2EBf5OAADQeRoqy1V38Rglr9kbqNWONe+14TK0ztWWbCBxjw4i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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Save model\n",
        "\n",
        "from pathlib import Path\n",
        "\n",
        "#1. Create model directory\n",
        "MODEL_PATH = Path(\"models\")\n",
        "MODEL_PATH.mkdir(parents=True, exist_ok=True)\n",
        "\n",
        "#2.Creat a model save path\n",
        "MODEL_NAME = \"01_PyTorch_model_1.pth\"\n",
        "MODEL_SAVE_PATH = MODEL_PATH / MODEL_NAME\n",
        "\n",
        "#3. Save the model state dict\n",
        "print(f\"Saving model to: {MODEL_SAVE_PATH}\")\n",
        "torch.save(obj=model_1.state_dict(),\n",
        "           f=MODEL_SAVE_PATH)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5ba2DRDnM8Vm",
        "outputId": "43e8bf97-2978-4222-ae32-4b03a2bc33a3"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving model to: models/01_PyTorch_model_1.pth\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load a PyTorch model\n",
        "\n",
        "#1. Creat a new instance of linear regression model v2\n",
        "loaded_model_1 = LinearRegressionModelV2()\n",
        "\n",
        "#2. Load the saved mode_1 state dict\n",
        "loaded_model_1.load_state_dict(torch.load(MODEL_SAVE_PATH))\n",
        "\n",
        "#3. Put the loaded model to device\n",
        "loaded_model_1.to(device)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s1GzdA5BPSCM",
        "outputId": "ed924dcf-ad90-4ea8-b94c-7f4ed474e38b"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-31-32c5e91555a4>:7: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
            "  loaded_model_1.load_state_dict(torch.load(MODEL_SAVE_PATH))\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegressionModelV2(\n",
              "  (linear_layer): Linear(in_features=1, out_features=1, bias=True)\n",
              ")"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate loaded model\n",
        "loaded_model_1.eval()\n",
        "with torch.inference_mode():\n",
        "  loaded_model_1_preds = loaded_model_1(X_test)\n",
        "y_preds == loaded_model_1_preds\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CPixDS11RjLH",
        "outputId": "bdb73e54-bbc0-46ae-9744-d5e82fe32d29"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[True],\n",
              "        [True],\n",
              "        [True],\n",
              "        [True],\n",
              "        [True],\n",
              "        [True],\n",
              "        [True],\n",
              "        [True],\n",
              "        [True],\n",
              "        [True]], device='cuda:0')"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "WJkoCFRoSjrT"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}